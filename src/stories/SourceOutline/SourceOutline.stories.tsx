import React, { ComponentProps } from "react";

import { Meta, Story } from "@storybook/react";
import { SourceOutline } from "../../devtools/client/debugger/src/components/PrimaryPanes/SourceOutline";

export default {
  title: "Soure Outline/Outline",
  component: SourceOutline,
} as Meta;

const Template: Story<ComponentProps<typeof SourceOutline>> = args => (
  <SourceOutline {...args} className="min-h-screen" />
);

export const Basic = Template.bind({});

Basic.args = {
  symbols: {
    functions: [
      {
        name: "filterOutlineItem",
        klass: null,
        location: { start: { line: 36, column: 26 }, end: { line: 48, column: 1 } },
        parameterNames: ["name", "filter"],
        identifier: null,
        index: 0,
      },
      {
        name: "isVisible",
        klass: null,
        location: { start: { line: 51, column: 0 }, end: { line: 57, column: 1 } },
        parameterNames: ["element", "parent"],
        identifier: {
          type: "Identifier",
          start: 1693,
          end: 1702,
          loc: {
            start: { line: 51, column: 9 },
            end: { line: 51, column: 18 },
            identifierName: "isVisible",
          },
          name: "isVisible",
        },
        index: 0,
      },
      {
        name: "constructor",
        klass: "Outline",
        location: { start: { line: 62, column: 2 }, end: { line: 66, column: 3 } },
        parameterNames: ["props"],
        identifier: null,
        index: 0,
      },
      {
        name: "componentDidUpdate",
        klass: "Outline",
        location: { start: { line: 68, column: 2 }, end: { line: 87, column: 3 } },
        parameterNames: ["prevProps", "prevState"],
        identifier: null,
        index: 0,
      },
      {
        name: "setFocus",
        klass: "Outline",
        location: { start: { line: 89, column: 2 }, end: { line: 94, column: 3 } },
        parameterNames: ["cursorPosition"],
        identifier: null,
        index: 0,
      },
      {
        name: "selectItem",
        klass: "Outline",
        location: { start: { line: 96, column: 2 }, end: { line: 109, column: 3 } },
        parameterNames: ["selectedItem"],
        identifier: null,
        index: 0,
      },
      {
        name: "onContextMenu",
        klass: "Outline",
        location: { start: { line: 111, column: 2 }, end: { line: 143, column: 3 } },
        parameterNames: ["event", "func"],
        identifier: null,
        index: 0,
      },
      {
        name: "click",
        klass: "Outline",
        location: { start: { line: 132, column: 13 }, end: { line: 139, column: 7 } },
        parameterNames: [],
        identifier: null,
        index: 0,
      },
      {
        name: "updateFilter",
        klass: "Outline",
        location: { start: { line: 145, column: 17 }, end: { line: 147, column: 3 } },
        parameterNames: ["filter"],
        identifier: null,
        index: 0,
      },
      {
        name: "renderPlaceholder",
        klass: "Outline",
        location: { start: { line: 149, column: 2 }, end: { line: 153, column: 3 } },
        parameterNames: [],
        identifier: null,
        index: 0,
      },
      {
        name: "renderLoading",
        klass: "Outline",
        location: { start: { line: 155, column: 2 }, end: { line: 163, column: 3 } },
        parameterNames: [],
        identifier: null,
        index: 0,
      },
      {
        name: "renderFunction",
        klass: "Outline",
        location: { start: { line: 165, column: 2 }, end: { line: 191, column: 3 } },
        parameterNames: ["func"],
        identifier: null,
        index: 0,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 174, column: 13 }, end: { line: 178, column: 9 } },
        parameterNames: ["el"],
        identifier: null,
        index: 0,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 179, column: 17 }, end: { line: 182, column: 9 } },
        parameterNames: [],
        identifier: null,
        index: 1,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 183, column: 23 }, end: { line: 183, column: 55 } },
        parameterNames: ["e"],
        identifier: null,
        index: 2,
      },
      {
        name: "renderClassHeader",
        klass: "Outline",
        location: { start: { line: 193, column: 2 }, end: { line: 199, column: 3 } },
        parameterNames: ["klass"],
        identifier: null,
        index: 0,
      },
      {
        name: "renderClassFunctions",
        klass: "Outline",
        location: { start: { line: 201, column: 2 }, end: { line: 237, column: 3 } },
        parameterNames: ["klass", "functions"],
        identifier: null,
        index: 0,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 209, column: 37 }, end: { line: 209, column: 64 } },
        parameterNames: ["func"],
        identifier: null,
        index: 3,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 210, column: 44 }, end: { line: 210, column: 72 } },
        parameterNames: ["func"],
        identifier: null,
        index: 4,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 211, column: 43 }, end: { line: 211, column: 64 } },
        parameterNames: ["c"],
        identifier: null,
        index: 5,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 219, column: 13 }, end: { line: 223, column: 9 } },
        parameterNames: ["el"],
        identifier: null,
        index: 6,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 228, column: 19 }, end: { line: 228, column: 46 } },
        parameterNames: [],
        identifier: null,
        index: 7,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 233, column: 30 }, end: { line: 233, column: 63 } },
        parameterNames: ["func"],
        identifier: null,
        index: 8,
      },
      {
        name: "renderFunctions",
        klass: "Outline",
        location: { start: { line: 239, column: 2 }, end: { line: 262, column: 3 } },
        parameterNames: ["functions"],
        identifier: null,
        index: 0,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 241, column: 37 }, end: { line: 241, column: 55 } },
        parameterNames: ["func"],
        identifier: null,
        index: 9,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 243, column: 6 }, end: { line: 243, column: 97 } },
        parameterNames: ["func"],
        identifier: null,
        index: 10,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 247, column: 6 }, end: { line: 247, column: 66 } },
        parameterNames: ["func"],
        identifier: null,
        index: 11,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 258, column: 28 }, end: { line: 258, column: 61 } },
        parameterNames: ["func"],
        identifier: null,
        index: 12,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 259, column: 21 }, end: { line: 259, column: 78 } },
        parameterNames: ["klass"],
        identifier: null,
        index: 13,
      },
      {
        name: "renderFooter",
        klass: "Outline",
        location: { start: { line: 264, column: 2 }, end: { line: 277, column: 3 } },
        parameterNames: [],
        identifier: null,
        index: 0,
      },
      {
        name: "render",
        klass: "Outline",
        location: { start: { line: 279, column: 2 }, end: { line: 306, column: 3 } },
        parameterNames: [],
        identifier: null,
        index: 0,
      },
      {
        name: "anonymous",
        klass: "Outline",
        location: { start: { line: 291, column: 54 }, end: { line: 291, column: 86 } },
        parameterNames: ["func"],
        identifier: null,
        index: 14,
      },
      {
        name: "mapStateToProps",
        klass: null,
        location: { start: { line: 309, column: 24 }, end: { line: 326, column: 1 } },
        parameterNames: ["state"],
        identifier: null,
        index: 0,
      },
      {
        name: "getFunctionText",
        klass: null,
        location: { start: { line: 318, column: 21 }, end: { line: 324, column: 5 } },
        parameterNames: ["line"],
        identifier: null,
        index: 0,
      },
    ],
    classes: [
      {
        name: "Outline",
        parent: {
          name: "Component",
          location: {
            start: { line: 59, column: 29 },
            end: { line: 59, column: 38 },
            identifierName: "Component",
          },
        },
        location: { start: { line: 59, column: 7 }, end: { line: 307, column: 1 } },
      },
    ],
    hasJsx: true,
    hasTypes: false,
    loading: false,
  },
  selectedSource: {
    id: "o1256",
    url: "webpack://_N_E/src/devtools/client/debugger/src/components/PrimaryPanes/Outline.js",
    relativeUrl:
      "webpack://_N_E/src/devtools/client/debugger/src/components/PrimaryPanes/Outline.js",
    isPrettyPrinted: false,
    isBlackBoxed: false,
    isExtension: false,
    isOriginal: true,
    content: {
      state: "fulfilled",
      value: {
        type: "text",
        value:
          '/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at <http://mozilla.org/MPL/2.0/>. */\n\n//\n\nimport React, { Component } from "react";\nimport { showMenu } from "devtools-contextmenu";\nimport { connect } from "../../utils/connect";\nimport { score as fuzzaldrinScore } from "fuzzaldrin-plus";\nconst classnames = require("classnames");\n\nimport { findClosestEnclosedSymbol } from "../../utils/ast";\nimport { copyToTheClipboard } from "../../utils/clipboard";\nimport { findFunctionText } from "../../utils/function";\nimport { getTruncatedFileName } from "../../utils/source";\nimport { Redacted } from "ui/components/Redacted";\nimport { trackEvent } from "ui/utils/telemetry";\n\nimport actions from "../../actions";\nimport {\n  getSelectedSourceWithContent,\n  getSymbols,\n  getCursorPosition,\n  getContext,\n} from "../../selectors";\n\nimport OutlineFilter from "./OutlineFilter";\nimport PreviewFunction from "../shared/PreviewFunction";\nimport uniq from "lodash/uniq";\nimport sortBy from "lodash/sortBy";\n\n/**\n * Check whether the name argument matches the fuzzy filter argument\n */\nconst filterOutlineItem = (name, filter) => {\n  // Set higher to make the fuzzaldrin filter more specific\n  const FUZZALDRIN_FILTER_THRESHOLD = 15000;\n  if (!filter) {\n    return true;\n  }\n\n  if (filter.length === 1) {\n    // when filter is a single char just check if it starts with the char\n    return filter.toLowerCase() === name.toLowerCase()[0];\n  }\n  return fuzzaldrinScore(name, filter) > FUZZALDRIN_FILTER_THRESHOLD;\n};\n\n// Checks if an element is visible inside its parent element\nfunction isVisible(element, parent) {\n  const parentTop = parent.getBoundingClientRect().top;\n  const parentBottom = parent.getBoundingClientRect().bottom;\n  const elTop = element.getBoundingClientRect().top;\n  const elBottom = element.getBoundingClientRect().bottom;\n  return parentTop < elTop && parentBottom > elBottom;\n}\n\nexport class Outline extends Component {\n  focusedElRef;\n\n  constructor(props) {\n    super(props);\n    this.focusedElRef = null;\n    this.state = { filter: "", focusedItem: null };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.cursorPosition &&\n      this.props.symbols &&\n      this.props.cursorPosition !== prevProps.cursorPosition\n    ) {\n      this.setFocus(this.props.cursorPosition);\n    }\n\n    //confirm we aren\'t rescrolling back up the outline panel unnecessarily\n    const isUniqueEvent = prevState.focusedItem !== this.state.focusedItem;\n\n    if (\n      this.focusedElRef &&\n      isUniqueEvent &&\n      !isVisible(this.focusedElRef, this.refs.outlineList)\n    ) {\n      this.focusedElRef.scrollIntoView({ block: "center" });\n    }\n  }\n\n  setFocus(cursorPosition) {\n    const { symbols } = this.props;\n    const closestItem = findClosestEnclosedSymbol(symbols, cursorPosition);\n\n    this.setState({ focusedItem: closestItem });\n  }\n\n  selectItem(selectedItem) {\n    const { cx, selectedSource, selectLocation } = this.props;\n    if (!selectedSource || !selectedItem) {\n      return;\n    }\n\n    selectLocation(cx, {\n      sourceId: selectedSource.id,\n      line: selectedItem.location.start.line,\n      column: selectedItem.location.start.column,\n    });\n\n    this.setState({ focusedItem: selectedItem });\n  }\n\n  onContextMenu(event, func) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const { selectedSource, getFunctionText, flashLineRange } = this.props;\n\n    const copyFunctionKey = "F";\n    const copyFunctionLabel = "Copy function";\n\n    if (!selectedSource) {\n      return;\n    }\n\n    const sourceLine = func.location.start.line;\n    const functionText = getFunctionText(sourceLine);\n\n    const copyFunctionItem = {\n      id: "node-menu-copy-function",\n      label: copyFunctionLabel,\n      accesskey: copyFunctionKey,\n      disabled: !functionText,\n      click: () => {\n        flashLineRange({\n          start: func.location.start.line,\n          end: func.location.end.line,\n          sourceId: selectedSource.id,\n        });\n        return copyToTheClipboard(functionText);\n      },\n    };\n    const menuOptions = [copyFunctionItem];\n    showMenu(event, menuOptions);\n  }\n\n  updateFilter = filter => {\n    this.setState({ filter: filter.trim() });\n  };\n\n  renderPlaceholder() {\n    const placeholderMessage = this.props.selectedSource ? "No functions" : "No file selected";\n\n    return <div className="outline-pane-info">{placeholderMessage}</div>;\n  }\n\n  renderLoading() {\n    return (\n      <div className="outline-pane-info">\n        {this.props.selectedSource\n          ? getTruncatedFileName(this.props.selectedSource, "")\n          : "Loading..."}\n      </div>\n    );\n  }\n\n  renderFunction(func) {\n    const { focusedItem } = this.state;\n    const { name, location, parameterNames } = func;\n    const isFocused = focusedItem === func;\n\n    return (\n      <li\n        key={`${name}:${location.start.line}:${location.start.column}`}\n        className={classnames("outline-list__element", { focused: isFocused })}\n        ref={el => {\n          if (isFocused) {\n            this.focusedElRef = el;\n          }\n        }}\n        onClick={() => {\n          trackEvent("outline.select");\n          this.selectItem(func);\n        }}\n        onContextMenu={e => this.onContextMenu(e, func)}\n      >\n        <span className="outline-list__element-icon">λ</span>\n        <Redacted className="inline-block">\n          <PreviewFunction func={{ name, parameterNames }} />\n        </Redacted>\n      </li>\n    );\n  }\n\n  renderClassHeader(klass) {\n    return (\n      <div>\n        <span className="keyword">class</span> {klass}\n      </div>\n    );\n  }\n\n  renderClassFunctions(klass, functions) {\n    const { symbols } = this.props;\n\n    if (!symbols || symbols.loading || klass == null || functions.length == 0) {\n      return null;\n    }\n\n    const { focusedItem } = this.state;\n    const classFunc = functions.find(func => func.name === klass);\n    const classFunctions = functions.filter(func => func.klass === klass);\n    const classInfo = symbols.classes.find(c => c.name === klass);\n\n    const item = classFunc || classInfo;\n    const isFocused = focusedItem === item;\n\n    return (\n      <li\n        className="outline-list__class"\n        ref={el => {\n          if (isFocused) {\n            this.focusedElRef = el;\n          }\n        }}\n        key={klass}\n      >\n        <h2\n          className={classnames("", { focused: isFocused })}\n          onClick={() => this.selectItem(item)}\n        >\n          {classFunc ? this.renderFunction(classFunc) : this.renderClassHeader(klass)}\n        </h2>\n        <ul className="outline-list__class-list">\n          {classFunctions.map(func => this.renderFunction(func))}\n        </ul>\n      </li>\n    );\n  }\n\n  renderFunctions(functions) {\n    const { filter } = this.state;\n    let classes = uniq(functions.map(func => func.klass));\n    let namedFunctions = functions.filter(\n      func => filterOutlineItem(func.name, filter) && !func.klass && !classes.includes(func.name)\n    );\n\n    let classFunctions = functions.filter(\n      func => filterOutlineItem(func.name, filter) && !!func.klass\n    );\n\n    if (this.props.alphabetizeOutline) {\n      namedFunctions = sortBy(namedFunctions, "name");\n      classes = sortBy(classes, "klass");\n      classFunctions = sortBy(classFunctions, "name");\n    }\n\n    return (\n      <ul ref="outlineList" className="outline-list devtools-monospace" dir="ltr">\n        {namedFunctions.map(func => this.renderFunction(func))}\n        {classes.map(klass => this.renderClassFunctions(klass, classFunctions))}\n      </ul>\n    );\n  }\n\n  renderFooter() {\n    return (\n      <div className="outline-footer">\n        <button\n          onClick={this.props.onAlphabetizeClick}\n          className={\n            this.props.alphabetizeOutline ? "sort-button sort-button--active" : "sort-button"\n          }\n        >\n          {"Sort by name"}\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const { symbols, selectedSource } = this.props;\n    const { filter } = this.state;\n\n    if (!selectedSource) {\n      return this.renderPlaceholder();\n    }\n\n    if (!symbols || symbols.loading) {\n      return this.renderLoading();\n    }\n\n    const symbolsToDisplay = symbols.functions.filter(func => func.name != "anonymous");\n\n    if (symbolsToDisplay.length === 0) {\n      return this.renderPlaceholder();\n    }\n\n    return (\n      <div className="outline">\n        <div className="outline__container space-y-2">\n          <OutlineFilter filter={filter} updateFilter={this.updateFilter} />\n          {this.renderFunctions(symbolsToDisplay)}\n          {this.renderFooter()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const selectedSource = getSelectedSourceWithContent(state);\n  const symbols = selectedSource ? getSymbols(state, selectedSource) : null;\n\n  return {\n    cx: getContext(state),\n    symbols,\n    selectedSource: selectedSource,\n    cursorPosition: getCursorPosition(state),\n    getFunctionText: line => {\n      if (selectedSource) {\n        return findFunctionText(line, selectedSource, symbols);\n      }\n\n      return null;\n    },\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectLocation: actions.selectLocation,\n  flashLineRange: actions.flashLineRange,\n})(Outline);\n',
        contentType: "text/javascript",
      },
    },
  },
};
